pipeline {
    agent any 

    tools {
        jdk 'jdk'
        nodejs 'nodejs'
    }

    environment {
        AWS_DEFAULT_REGION = 'us-east-1'
        GIT_REPO_NAME = "End-to-End-3-tier-DevSecops-Project"
        GIT_USER_NAME = "Nalla06"
    }

    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout from Git') {
            steps {
                git credentialsId: 'GITHUB', branch: 'main', url: 'https://github.com/Nalla06/End-to-End-3-tier-DevSecops-Project.git'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('Application-Code/backend') {
                    withSonarQubeEnv('sonar-server') {
                        withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                            sh '''
                                /opt/sonar-scanner/bin/sonar-scanner \
                                  -Dsonar.projectKey=three-tier-backend \
                                  -Dsonar.sources=. \
                                  -Dsonar.host.url=http://3.84.4.80:9000 \
                                  -Dsonar.login=$SONAR_TOKEN
                            '''
                        }
                    }
                }
            }
        }

        stage('Quality Check') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        }

        stage('OWASP Dependency-Check Scan') {
            steps {
                dir('Application-Code/backend') {
                    dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                }
            }
        }

        stage('Trivy File Scan') {
            steps {
                dir('Application-Code/backend') {
                    catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
                        sh 'trivy fs . > trivyfs.txt || echo "Trivy scan completed with issues"'
                    }
                }
            }
        }

        stage("Docker Image Build & Push") {
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'ACCOUNT_ID', variable: 'AWS_ACCOUNT_ID'),
                        [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-key'],
                        string(credentialsId: 'three-tier-repo', variable: 'AWS_ECR_REPO_NAME')
                    ]) {
                        def REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"

                        dir('Application-Code/backend') {
                            // Step 1: Clean up Docker resources
                            sh '''
                                docker system prune -f || true
                                docker container prune -f || true
                            '''
                            
                            // Step 2: Build Docker image
                            sh "docker build -t ${AWS_ECR_REPO_NAME} . || exit 1"
                            
                            // Step 3: Prepare ECR login (broken into explicit steps for debugging)
                            def ecrUri = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
                            echo "ECR Repository URI: ${ecrUri}"
                            
                            // Step 4: Login to ECR with careful variable handling
                            sh """
                                echo "Attempting to login to ECR at: ${ecrUri}"
                                aws ecr get-login-password --region ${AWS_DEFAULT_REGION} > ecr_password.txt
                                cat ecr_password.txt | docker login --username AWS --password-stdin ${ecrUri}
                                rm -f ecr_password.txt
                            """
                            
                            // Step 5: Tag the Docker image
                            sh """
                                echo "Tagging image: ${AWS_ECR_REPO_NAME} as ${ecrUri}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}"
                                docker tag ${AWS_ECR_REPO_NAME} ${ecrUri}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER} || exit 1
                            """
                            
                            // Step 6: Push to ECR
                            sh """
                                echo "Pushing image to: ${ecrUri}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}"
                                docker push ${ecrUri}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER} || exit 1
                            """
                        }
                    }
                }
            }
        }

        stage("TRIVY Image Scan") {
            steps {
                script {
                        script {
                    withCredentials([
                        string(credentialsId: 'ACCOUNT_ID', variable: 'AWS_ACCOUNT_ID'),
                        string(credentialsId: 'three-tier-repo', variable: 'AWS_ECR_REPO_NAME')
                    ]) {
                        def ecrUri = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
                        catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
                            sh """
                                echo "Scanning image: ${ecrUri}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}"
                                trivy image ${ecrUri}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER} > trivyimage.txt || echo 'Trivy image scan completed with issues'
                            """
                        }
                    }
                }
                }
            }
        }

        stage('Update Deployment file') {
            steps {
                dir('Kubernetes-Manifests-file/Backend') {
                    withCredentials([
                        string(credentialsId: 'github', variable: 'GITHUB_TOKEN'),
                        string(credentialsId: 'ACCOUNT_ID', variable: 'AWS_ACCOUNT_ID'),
                        string(credentialsId: 'three-tier-repo', variable: 'AWS_ECR_REPO_NAME')
                    ]) {
                        script {
                            withCredentials([
                                string(credentialsId: 'github', variable: 'GITHUB_TOKEN'),
                                string(credentialsId: 'ACCOUNT_ID', variable: 'AWS_ACCOUNT_ID'),
                                string(credentialsId: 'three-tier-repo', variable: 'AWS_ECR_REPO_NAME')
                            ]) {
                                def ecrUri = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
                                sh """
                                    echo "Setting up git config"
                                    git config user.email "lakshmi.rajyam06@gmail.com"
                                    git config user.name "Nalla06"

                                    echo "Updating deployment file with image: ${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}"
                                    imageTag=\$(grep -oP '(?<=backend:)[^ ]+' deployment.yaml) || imageTag="latest"
                                    echo "Current image tag: \$imageTag, new tag: ${BUILD_NUMBER}"
                                    
                                    sed -i "s|${AWS_ECR_REPO_NAME}:\$imageTag|${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}|g" deployment.yaml || echo "Sed failed"
                                    
                                    echo "Committing and pushing changes"
                                    git add deployment.yaml
                                    git commit -m "Update deployment Image to version ${BUILD_NUMBER}" || echo "No changes to commit"
                                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:main || echo "Git push failed"
                                """
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}