pipeline {
    agent any 

    tools {
        jdk 'jdk'
        nodejs 'nodejs'
    }

    environment {
        AWS_DEFAULT_REGION = 'us-east-1'
        GIT_REPO_NAME = "End-to-End-3-tier-DevSecops-Project"
        GIT_USER_NAME = "Nalla06"
    }

    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout from Git') {
            steps {
                git credentialsId: 'GITHUB', branch: 'main', url: 'https://github.com/Nalla06/End-to-End-3-tier-DevSecops-Project.git'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('Application-Code/backend') {
                    withSonarQubeEnv('sonar-server') {
                        withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                            sh '''
                                /opt/sonar-scanner/bin/sonar-scanner \
                                  -Dsonar.projectKey=three-tier-backend \
                                  -Dsonar.sources=. \
                                  -Dsonar.host.url=http://3.84.4.80:9000 \
                                  -Dsonar.login=$SONAR_TOKEN
                            '''
                        }
                    }
                }
            }
        }

        stage('Quality Check') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        }

        stage('OWASP Dependency-Check Scan') {
            steps {
                dir('Application-Code/backend') {
                    dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                }
            }
        }

        stage('Trivy File Scan') {
            steps {
                dir('Application-Code/backend') {
                    catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
                        sh 'trivy fs . > trivyfs.txt || echo "Trivy scan completed with issues"'
                    }
                }
            }
        }

        stage("Docker Image Build & Push") {
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'ACCOUNT_ID', variable: 'AWS_ACCOUNT_ID'),
                        [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-key'],
                        string(credentialsId: 'three-tier-repo', variable: 'AWS_ECR_REPO_NAME')
                    ]) {
                        def REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"

                        dir('Application-Code/backend') {
                            // Clean up Docker resources
                            sh '''
                                docker system prune -f || true
                                docker container prune -f || true
                            '''

                            // Build Docker image
                            sh "docker build -t ${AWS_ECR_REPO_NAME} . || exit 1"

                            // Prepare ECR login and repository
                            sh """#!/bin/bash
                                ECR_REPO_NAME=\${AWS_ECR_REPO_NAME}
                                AWS_REGION=${AWS_DEFAULT_REGION}

                                echo "Checking if repository \${ECR_REPO_NAME} exists..."
                                if ! aws ecr describe-repositories --repository-names \${ECR_REPO_NAME} --region \${AWS_REGION} 2>/dev/null; then
                                    echo "Repository \${ECR_REPO_NAME} does not exist. Creating it..."
                                    aws ecr create-repository --repository-name \${ECR_REPO_NAME} --region \${AWS_REGION}
                                    echo "Repository created successfully."
                                else
                                    echo "Repository \${ECR_REPO_NAME} already exists."
                                fi

                                ECR_URI=\$(aws ecr describe-repositories --repository-names \${ECR_REPO_NAME} --region \${AWS_REGION} --query 'repositories[0].repositoryUri' --output text)
                                echo "ECR Repository URI: \${ECR_URI}"

                                echo "Logging in to ECR..."
                                aws ecr get-login-password --region \${AWS_REGION} | docker login --username AWS --password-stdin \${ECR_URI%%/*}

                                echo "Tagging image as \${ECR_URI}:${BUILD_NUMBER}"
                                docker tag \${ECR_REPO_NAME} \${ECR_URI}:${BUILD_NUMBER}

                                echo "Pushing image to ECR..."
                                docker push \${ECR_URI}:${BUILD_NUMBER}

                                echo "\${ECR_URI}" > /tmp/ecr_uri.txt
                            """
                        }
                    }
                }
            }
        }

        stage("TRIVY Image Scan") {
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'ACCOUNT_ID', variable: 'AWS_ACCOUNT_ID'),
                        string(credentialsId: 'three-tier-repo', variable: 'AWS_ECR_REPO_NAME'),
                        [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-key']
                    ]) {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
                            sh """#!/bin/bash
                                ECR_URI=\$(cat /tmp/ecr_uri.txt)
                                echo "Scanning image: \${ECR_URI}:${BUILD_NUMBER}"
                                trivy image \${ECR_URI}:${BUILD_NUMBER} > trivyimage.txt || echo 'Trivy image scan completed with issues'
                            """
                        }
                    }
                }
            }
        }

        stage('Update Deployment file') {
            steps {
                dir('Kubernetes-Manifests-file/Backend') {
                    withCredentials([
                        string(credentialsId: 'github', variable: 'GITHUB_TOKEN'),
                        string(credentialsId: 'ACCOUNT_ID', variable: 'AWS_ACCOUNT_ID'),
                        string(credentialsId: 'three-tier-repo', variable: 'AWS_ECR_REPO_NAME'),
                        [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-key']
                    ]) {
                        script {
                            writeFile file: 'update_deployment.sh', text: '''#!/bin/bash
                                ECR_URI=$(cat /tmp/ecr_uri.txt)
                                REPO_NAME=$(basename ${ECR_URI})
                                BUILD_NUMBER=$1
                                GH_TOKEN=$2
                                GIT_USER_NAME=$3
                                GIT_REPO_NAME=$4

                                echo "Setting up git config"
                                git config user.email "lakshmi.rajyam06@gmail.com"
                                git config user.name "Nalla06"

                                echo "Updating deployment file with image: ${ECR_URI}:${BUILD_NUMBER}"

                                if grep -q "${REPO_NAME}:" deployment.yaml; then
                                    imageTag=$(grep -oP "(?<=${REPO_NAME}:)[^ \"\\n]+" deployment.yaml) || imageTag="latest"
                                    echo "Current image tag: $imageTag, new tag: ${BUILD_NUMBER}"

                                    sed -i "s|${REPO_NAME}:$imageTag|${REPO_NAME}:${BUILD_NUMBER}|g" deployment.yaml || echo "Sed failed"
                                else
                                    echo "Could not find image reference pattern in deployment.yaml. Please check the file format."
                                    cat deployment.yaml
                                fi

                                echo "Committing and pushing changes"
                                git add deployment.yaml
                                git commit -m "Update deployment Image to version ${BUILD_NUMBER}" || echo "No changes to commit"
                                git push https://${GH_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:main || echo "Git push failed"
                            '''

                            sh 'chmod +x update_deployment.sh'
                            sh "./update_deployment.sh '${BUILD_NUMBER}' '${GITHUB_TOKEN}' '${GIT_USER_NAME}' '${GIT_REPO_NAME}'"
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
