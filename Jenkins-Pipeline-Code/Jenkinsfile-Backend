pipeline {
    agent any 

    tools {
        jdk 'jdk'
        nodejs 'nodejs'
    }

    environment {
        SCANNER_HOME = 'sonar-scanner'
        AWS_DEFAULT_REGION = 'us-east-1'
        GIT_REPO_NAME = "End-to-End-three-tier-DevSecops-Project"
        GIT_USER_NAME = "Nalla06"
    }

    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout from Git') {
            steps {
                git branch: 'main', credentialsId: 'GITHUB', url: 'https://github.com/Nalla06/End-to-End-three-tier-DevSecops-Project.git'
            }
        }

        stage('Sonarqube Analysis') {
            steps {
                dir('Application-Code/backend') {
                    withSonarQubeEnv('sonar-server') {
                        withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                            sh '''${SCANNER_HOME}/bin/sonar-scanner \
                                -Dsonar.projectKey=three-tier-backend \
                                -Dsonar.sources=. \
                                -Dsonar.host.url=http://three.84.4.80:9000 \
                                -Dsonar.login=$SONAR_TOKEN'''
                        }
                    }
                }
            }
        }

        stage('Quality Check') {
            steps {
                waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
            }
        }

        stage('OWASP Dependency-Check Scan') {
            steps {
                dir('Application-Code/backend') {
                    dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                }
            }
        }

        stage('Trivy File Scan') {
            steps {
                dir('Application-Code/backend') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }

        stage("Docker Image Build & Push") {
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'ACCOUNT_ID', variable: 'AWS_ACCOUNT_ID'),
                        string(credentialsId: 'three-tier-repo', variable: 'AWS_ECR_REPO_NAME')
                    ]) {
                        def REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"

                        dir('Application-Code/backend') {
                            sh '''
                                docker system prune -f
                                docker container prune -f
                                docker build -t ${AWS_ECR_REPO_NAME} .
                                aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_URI}
                                docker tag ${AWS_ECR_REPO_NAME} ${REPOSITORY_URI}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}
                                docker push ${REPOSITORY_URI}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}
                            '''
                        }
                    }
                }
            }
        }

        stage("TRIVY Image Scan") {
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'ACCOUNT_ID', variable: 'AWS_ACCOUNT_ID'),
                        string(credentialsId: 'three-tier-repo', variable: 'AWS_ECR_REPO_NAME')
                    ]) {
                        def REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
                        sh "trivy image ${REPOSITORY_URI}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER} > trivyimage.txt"
                    }
                }
            }
        }

        stage('Update Deployment file') {
            steps {
                dir('Kubernetes-Manifests-file/Backend') {
                    withCredentials([
                        string(credentialsId: 'github', variable: 'GITHUB_TOKEN'),
                        string(credentialsId: 'ACCOUNT_ID', variable: 'AWS_ACCOUNT_ID'),
                        string(credentialsId: 'three-tier-repo', variable: 'AWS_ECR_REPO_NAME')
                    ]) {
                        script {
                            def REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
                            sh """
                                git config user.email "lakshmi.rajyam06@gmail.com"
                                git config user.name "Nalla06"
                                echo "Current BUILD_NUMBER: $BUILD_NUMBER"
                                imageTag=\$(grep -oP '(?<=backend:)[^ ]+' deployment.yaml)
                                echo "Old Image Tag: \$imageTag"
                                sed -i "s|\${AWS_ECR_REPO_NAME}:\$imageTag|\${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}|" deployment.yaml
                                git add deployment.yaml
                                git commit -m "Update deployment Image to version ${BUILD_NUMBER}"
                                git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:master
                            """
                        }
                    }
                }
            }
        }
    }
}